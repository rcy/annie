// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package model

import (
	"context"
)

const insertNickWeatherRequest = `-- name: InsertNickWeatherRequest :exec
insert into nick_weather_requests(nick, query, city, country) values(?,?,?,?)
`

type InsertNickWeatherRequestParams struct {
	Nick    string
	Query   string
	City    string
	Country string
}

func (q *Queries) InsertNickWeatherRequest(ctx context.Context, arg InsertNickWeatherRequestParams) error {
	_, err := q.db.ExecContext(ctx, insertNickWeatherRequest,
		arg.Nick,
		arg.Query,
		arg.City,
		arg.Country,
	)
	return err
}

const insertVisit = `-- name: InsertVisit :exec
insert into visits(session, note_id) values(?,?)
`

type InsertVisitParams struct {
	Session string
	NoteID  int64
}

func (q *Queries) InsertVisit(ctx context.Context, arg InsertVisitParams) error {
	_, err := q.db.ExecContext(ctx, insertVisit, arg.Session, arg.NoteID)
	return err
}

const lastNickWeatherRequest = `-- name: LastNickWeatherRequest :one
select id, created_at, nick, "query", city, country from nick_weather_requests where nick = ? order by created_at desc limit 1
`

func (q *Queries) LastNickWeatherRequest(ctx context.Context, nick string) (NickWeatherRequest, error) {
	row := q.db.QueryRowContext(ctx, lastNickWeatherRequest, nick)
	var i NickWeatherRequest
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Nick,
		&i.Query,
		&i.City,
		&i.Country,
	)
	return i, err
}

const link = `-- name: Link :one
select id, created_at, nick, text, kind, target from notes where id = ? and kind = 'link'
`

func (q *Queries) Link(ctx context.Context, id int64) (Note, error) {
	row := q.db.QueryRowContext(ctx, link, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Nick,
		&i.Text,
		&i.Kind,
		&i.Target,
	)
	return i, err
}
